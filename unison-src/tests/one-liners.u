> ((x -> x) : forall a . a -> a)
> ((x y -> x) : forall a b . a -> b -> a)
> ((Int.+) : Int -> Int -> Int)
> (3 : Nat)
> (+3 : Int)
> (3.0 : Float)
> (Boolean.not true : Boolean)
> (Boolean.not : Boolean -> Boolean)
> ("Hello, world!" : Text)
-- > ((if true then 1 else 2) : Nat)
-- > (if true then (x -> x) else (x -> x) : forall a . a -> a)
> (or true false : Boolean)
> (and true false : Boolean)
> ([1,2,3] : Sequence Nat)
> (Stream.fromInt +0 : Stream Int)
> ((Nat.+) 1 : Nat -> Nat)

x : Int
x = let
  (|>) : forall a b . a -> (a -> b) -> b
  a |> f = f a
  Stream.fromInt -3
    |> Stream.take 10
    |> Stream.foldLeft +0 (Int.+)

