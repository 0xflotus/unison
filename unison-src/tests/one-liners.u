((x -> x) : forall a . a -> a)
((x y -> x) : forall a b . a -> b -> a)
((Int64.+) : Int64 -> Int64 -> Int64)
(3 : Nat)
(+3 : Int64)
(3.0 : Float)
(Boolean.not true : Boolean)
(Boolean.not : Boolean -> Boolean)
("Hello, world!" : Text)
-- ((if true then 1 else 2) : Nat)
-- (if true then (x -> x) else (x -> x) : forall a . a -> a)
(or true false : Boolean)
(and true false : Boolean)
([1,2,3] : Sequence Nat)
(Stream.from-int64 +0 : Stream Int64)
((Nat.+) 1 : Nat -> Nat)

x : Int64
x = let
  (|>) : forall a b . a -> (a -> b) -> b
  a |> f = f a
  Stream.from-int64 -3
    |> Stream.take 10
    |> Stream.fold-left +0 (Int64.+)
()
