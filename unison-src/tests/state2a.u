--State2 effect

type Optional a = None | Some a

effect State s where
  put : s -> {State s} ()
  get : {State s} s

state : s -> Effect (State s) a -> (s, a)
state s eff = case eff of
  { State.get -> k } -> handle (state s) in k s
  { State.put snew -> k } -> handle (state snew) in k ()
  { a } -> (s, a)

modify : (s -> s) -> {State s} ()
modify f = State.put (f State.get)

increment : '{State UInt64} ()
increment = '(modify ((+) 1))

second : (a, b) -> b
second p = case p of (_,b) -> b

first : (a, b) -> a
first p = case p of (a,_) -> a

ex : Text
ex =
  result : (UInt64, Text)
  result = handle (state 10) in
    State.put (11 + 1)
    x = State.get
    State.put (5 + 5)
    "hello"

  second result

-- returns () for some reason!!!
ex
