identity : ∀ a . a -> a;
identity a = a;

then : ∀ a b c . (a -> b) -> (b -> c) -> a -> c;
then f1 f2 x = f2 (f1 x);

flip : ∀ a b c . (a -> b -> c) -> b -> a -> c;
flip f b a = f a b;

Remote.transfer : Node -> Remote Unit;
Remote.transfer node = Remote.at node unit;

Remote.map : ∀ a b . (a -> b) -> Remote a -> Remote b;
Remote.map f = Remote.bind (f `then` Remote.pure);

Remote =
  ( Remote.pure : ∀ a . a -> Remote a
  , Remote.bind : ∀ a b . (a -> Remote b) -> Remote a -> Remote b);

Vector.fold-right : ∀ a b . (a -> b -> b) -> b -> Vector a -> b;
Vector.fold-right f z vs = Vector.fold-left (flip f) z (Vector.reverse vs);

-- todo: figure out why typechecker bombs when try to annotate this
-- Vector.fold-balanced : ∀ a . a -> (a -> a -> a) -> Vector a -> a;
Vector.fold-balanced zero plus vs = 
  let rec
    go zero plus vs = 
      if (Vector.size vs <= 2) 
         (Vector.fold-left zero plus vs)
         (let p = Vector.split vs;
              go zero plus (1st p) `Vector.concatenate` go zero plus (2nd p);;);
    go zero plus vs;; 
  ;

Optional.map : ∀ a b . (a -> b) -> Optional a -> Optional b;
Optional.map f = Optional.fold None (f `then` Some);

Optional.bind : ∀ a b . (a -> Optional b) -> Optional a -> Optional b;
Optional.bind f = Optional.fold None f;

Optional.pure : ∀ a . a -> Optional a;
Optional.pure = Some;

Either.map : ∀ a b c . (b -> c) -> Either a b -> Either a c;
Either.map f = Either.fold Left (f `then` Right);

Either.pure : ∀ a b . b -> Either a b;
Either.pure = Right;

Either.bind : ∀ a b c . (b -> Either a c) -> Either a b -> Either a c;
Either.bind = Either.fold Left;

Either.swap : ∀ a b . Either a b -> Either b a;
Either.swap e = Either.fold Right Left e;

const x y = x;

first : ∀ a b . Pair a b -> a;
first p = Pair.fold const p;

rest : ∀ a b . Pair a b -> b;
rest p = Pair.fold (x y -> y) p;

1st = first;
2nd = rest `then` first;
3rd = rest `then` (rest `then` first);
4th = rest `then` (rest `then` (rest `then` first));
5th = rest `then` (rest `then` (rest `then` (rest `then` first)));
