type Trie k v = { head : Optional v, tail : Map k (Trie k v) }

namespace Trie where
  empty : Trie k v
  empty = Trie None Map.empty

  lookup : [k] -> Trie k v -> Optional v
  lookup path t = case path of
    [] -> head t
    p +: ps -> flatMap (lookup ps) (Map.lookup p (tail t))

  unionWith : (v -> v -> v) -> Trie k v -> Trie k v -> Trie k v
  unionWith f t1 t2 =
    Trie (map2 f (head t1) (head t2)) 
         (Map.unionWith (unionWith f) (tail t1) (tail t2))


Trie.union : Trie k v -> Trie k v -> Trie k v
Trie.union = Trie.unionWith const

Trie.insert : [k] -> v -> Trie k v -> Trie k v
Trie.insert path v t =
  unionWith const (Trie.singleton path v) t

Trie.singleton : [k] -> v -> Trie k v
Trie.singleton path v = insert path v Trie.empty

