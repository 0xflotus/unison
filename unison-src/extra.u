
Index.empty : ∀ k v . Remote (Index k v);
Index.empty = Remote.map Index.empty# Remote.here;

Index.keys : ∀ k v . Index k v -> Remote (Vector k);
Index.keys = Index.from-unsafe Index.keys#;

Index.1st-key : ∀ k v . Index k v -> Remote (Optional k);
Index.1st-key = Index.from-unsafe Index.1st-key#;

Index.increment : ∀ k v . k -> Index k v -> Remote (Optional k);
Index.increment k = Index.from-unsafe (Index.increment# k); 

Index.lookup : ∀ k v . k -> Index k v -> Remote (Optional v);
Index.lookup k = Index.from-unsafe (Index.lookup# k);

Index.delete : ∀ k v . k -> Index k v -> Remote Unit; 
Index.delete k = Index.from-unsafe (Index.delete# k);

Index.insert : ∀ k v . k -> v -> Index k v -> Remote Unit;
Index.insert k v = Index.from-unsafe (Index.insert# k v);

Index.from-unsafe : ∀ k v r . (Text -> r) -> Index k v -> Remote r;
Index.from-unsafe f ind = let
  p = Index.representation# ind;
  Remote.map f (Remote.at (1st p) (2nd p));;
;

alias IndexedTraversal k v = 
   ( Remote (Optional k)
   , k -> Remote (Optional v)
   , k -> Remote (Optional k));

Index.traversal : ∀ k v . Index k v -> IndexedTraversal (k, Hash k) v; 
Index.traversal ind = let 
  add-hash = Optional.map (k -> (k, hash# k));
  ( Index.1st-key ind |> Remote.map add-hash
  , k -> Index.lookup (1st k) ind
  , k -> Index.increment (1st k) ind |> Remote.map add-hash 
  );;
;

IndexedTraversal.empty : ∀ k v . IndexedTraversal k v;
IndexedTraversal.empty = 
  (Remote.pure None, const (Remote.pure None), const (Remote.pure None));

Http.get-url : Text -> Remote (Either Text Text);
Http.get-url url = Remote.map Http.getUrl# (Remote.pure url);

hash! : ∀ a . a -> Remote (Hash a);
hash! a = Remote.map hash# (Remote.pure a);
